"use strict";

exports.__esModule = true;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var getCodeScreenshot = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(src) {
        var codeType, srcArg, res;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        codeType = "javascript", srcArg = btoa(src);
                        _context.next = 3;
                        return fetch("https://84wz7ux5rc.execute-api.us-east-1.amazonaws.com/default/screenshot-as-a-service-dev-screenshot-function?type=code&code=" + srcArg + "&codeType=" + codeType);

                    case 3:
                        res = _context.sent;
                        return _context.abrupt("return", res.text());

                    case 5:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, this);
    }));

    return function getCodeScreenshot(_x) {
        return _ref.apply(this, arguments);
    };
}();

var _unistUtilVisit = require("unist-util-visit");

var _unistUtilVisit2 = _interopRequireDefault(_unistUtilVisit);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function codeScreenshot() {
    var _this = this;

    return function (tree) {
        return new Promise(function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2(resolve, reject) {
                var nodesToChange, _iterator, _isArray, _i, _ref4, _ref3, node, url;

                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                nodesToChange = [];

                                (0, _unistUtilVisit2.default)(tree, "code", function (node) {
                                    nodesToChange.push({
                                        node: node
                                    });
                                });
                                _iterator = nodesToChange, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

                            case 3:
                                if (!_isArray) {
                                    _context2.next = 9;
                                    break;
                                }

                                if (!(_i >= _iterator.length)) {
                                    _context2.next = 6;
                                    break;
                                }

                                return _context2.abrupt("break", 29);

                            case 6:
                                _ref4 = _iterator[_i++];
                                _context2.next = 13;
                                break;

                            case 9:
                                _i = _iterator.next();

                                if (!_i.done) {
                                    _context2.next = 12;
                                    break;
                                }

                                return _context2.abrupt("break", 29);

                            case 12:
                                _ref4 = _i.value;

                            case 13:
                                _ref3 = _ref4;
                                node = _ref3.node;
                                _context2.prev = 15;
                                _context2.next = 18;
                                return getCodeScreenshot(node.value);

                            case 18:
                                url = _context2.sent;

                                node.type = "image";
                                node.url = url;
                                _context2.next = 27;
                                break;

                            case 23:
                                _context2.prev = 23;
                                _context2.t0 = _context2["catch"](15);

                                console.log("ERROR", _context2.t0);
                                return _context2.abrupt("return", reject(_context2.t0));

                            case 27:
                                _context2.next = 3;
                                break;

                            case 29:

                                resolve();

                            case 30:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this, [[15, 23]]);
            }));

            return function (_x2, _x3) {
                return _ref2.apply(this, arguments);
            };
        }());
    };
}

exports.default = codeScreenshot;
module.exports = exports["default"];